function [ obj ] = process_decay( obj, varargin )
%PROCESS_DECAY Processes XYEE decay data
%   Returns: an XYEE object

varargin = cellflat(varargin);
decay_time = '2ns';
for ii=1:2:numel(varargin)
    switch varargin{ii}
        case 'decay_time'
            decay_time = varargin{ii+1};
    end
end
disp(['processing decay time with ' decay_time]);

%% Turn off specific warnings
warning('off', 'curvefit:prepareFittingData:removingNaNAndInf');

%% Set required variables
xnum = h5readatt(obj.fname, ['/' obj.experimentname '/settings/xystage'], 'xnum');
ynum = h5readatt(obj.fname, ['/' obj.experimentname '/settings/xystage'], 'ynum');
finfo = ncinfo(obj.fname);
dimnames = {finfo.Groups(2).Dimensions.Name};
dimsizes = [finfo.Groups(2).Dimensions.Length];
excitation_wavelengths = dimsizes(strcmp('excitation_wavelengths', dimnames));
number_of_pulses = dimsizes(strcmp('number_of_pulses', dimnames));
samples = dimsizes(strcmp('samples', dimnames));
active_channels = dimsizes(strcmp('active_channels', dimnames));

obj.digitizer.spectra = NaN(xnum, ynum, samples, number_of_pulses, active_channels, excitation_wavelengths);
disp(size(obj.digitizer.spectra))
obj.xystage.coordinates = NaN(xnum, ynum, 2);

%% Read in all the data and normalize decay
disp('Automatically correcting decay. If something looks off, edit XYEE.process_decay.');

for x=1:xnum
    for y=1:ynum
        group = ['/' obj.experimentname sprintf('/x%dy%d/', x, y)];
        disp(group)
        try
            decay = h5read(obj.fname, [group 'pulses']);
            disp(size(decay))
        catch
            fprintf('Major data loss occured at (x,y) = (%d, %d)\n', x, y);
            continue;
        end
        
        decay = -decay; 
        % taking mean of first 50 values of each decay spectrum,
        % subtracting
        meandecay = mean(decay(1:50,:,:));
        decay = decay-meandecay; 
        % normalizing decay curves 
        decay = decay./max(decay); 
        

%         trig = zeros(1,d_sz(1));
%         for ii=1:d_sz(1)
%             trig(ii) = find(decay(ii,:)>0.8,1);
%         end
%         trig = round(median(trig));
%         
%         decay = decay - repmat(mean(decay(:,1:trig-5),d_dim), d_rep);
%         switch decay_time
%             case {'64ns', '64 ns'}
%                 trig = trig+2;
%                 decay = decay ./ repmat(max(decay(:,trig:4000),[],d_dim), d_rep);
%             case {'2ns', '2 ns'}
%                 decay = decay ./ repmat(max(decay(:,trig:4000),[],d_dim), d_rep);
%             case {'2560ns', '2560 ns'}
%                 break;
% %                 continue;
%             otherwise
%                 error('Unknown decay_time in XYEE.process_decay');
%         end
        
%         trig = zeros(1,d_sz(1));
%         for ii=1:d_sz(1)
%             try
%                 trig(ii) = find(decay(ii,100:end-100)>0.9,1)+100;
%             catch
%                 [trig(ii), ~] = max(decay(ii,100:end-1));
%                 trig(ii) = trig(ii) + 100;
%             end
%         end
%         trig = round(median(trig));
        obj.digitizer.spectra(x,y,:,:,:) = decay;
        obj.xystage.coordinates(x,y,:) = h5read(obj.fname, [group 'position']);
        
%         switch decay_time
%             case {'64ns', '64 ns'}
%                 % 64 ns time, starting at the trigger point
%                 obj.time(x,y,:) = (0:64:(64*d_sz(2) - 1)) - 64 * (trig-1);
%             case {'2ns', '2 ns'}
%                 % 2 ns time, starting at the trigger point
%                 obj.time(x,y,:) = (0:2:(2*d_sz(2) - 1)) - 2 * (trig-1);
%             case {'2560ns', '2560 ns'}
%                 % 2560 ns time, starting at the trigger point
%                 obj.time(x,y,:) = (0:2560:(2560*d_sz(2) - 1)) - 2560 * (trig);
%             otherwise
%                 error('Unknown decay_time in XYEE.process_decay');
%         end

    end
%     fprintf('%.2f %% complete!\n', double(x)/double(xnum)*100);
end

%% Turn all warnings back on
warning('on', 'curvefit:prepareFittingData:removingNaNAndInf');

end

