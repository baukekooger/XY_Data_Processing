function [ obj ] = process_transmission( obj, varargin )
%PROCESS_DECAY Processes XYEE transmission data
%   Returns: an XYEE object

%% Process varargin
varargin = cellflat(varargin);
autocorrect = true;
remove_dark = true;
for k=1:2:numel(varargin)
    switch varargin{k}
        case {'autocorrect', 'ac', 't'}
            autocorrect = varargin{k+1};
        case {'remove_dark', 'rd', 'h'}
            remove_dark = varargin{k+1};
    end
end

%% Turn off specific warnings
warning('off', 'curvefit:prepareFittingData:removingNaNAndInf');

%% Prepare and set required variables

obj.spectrometer.wavelengths = unique(h5read(obj.fname, '/dark/emission'));
wavelengths_size = length(obj.spectrometer.wavelengths);

obj.spectrometer.darkspectrum = NaN(wavelengths_size);
obj.spectrometer.lampspectrum = NaN(wavelengths_size); 
obj.spectrometer.spectra = NaN(obj.xystage.xnum, obj.xystage.ynum, wavelengths_size);
obj.xystage.coordinates = NaN(obj.xystage.xnum, obj.xystage.ynum, 2);

%% Read in all the data

obj.spectrometer.darkspectrum = h5read(obj.fname, '/dark/spectrum'); 
obj.spectrometer.lampspectrum = h5read(obj.fname, '/lamp/spectrum') - ...
    obj.spectrometer.darkspectrum; 

for x=1:obj.xystage.xnum
    for y=1:obj.xystage.ynum
        group = sprintf('/x%dy%d/',x,y);
        spectrum = h5read(obj.fname, [group 'spectrum'])';
        obj.spectrometer.spectra(x,y,:) = spectrum;
        obj.xystage.coordinates(x,y,:) = h5read(obj.fname, ...
                [group 'position']);
    end
end

%% Remove dark spectrum and divide by lampspectrum if requested 
warning('on', 'curvefit:prepareFittingData:removingNaNAndInf');

if (autocorrect || remove_dark)
     darkrepeat = repmat(obj.spectrometer.darkspectrum, 1, ...
         obj.xystage.xnum, obj.xystage.ynum);
     darkrepeat = permute(darkrepeat, [2 3 1]); 
     obj.spectrometer.spectra = obj.spectrometer.spectra - darkrepeat;
end

disp('darkspectrum removed')

if autocorrect
    lamprepeat = repmat(obj.spectrometer.lampspectrum, 1, ...
        obj.xystage.xnum, obj.xystage.ynum);
    lamprepeat = permute(lamprepeat, [2 3 1]);
     obj.spectrometer.spectra = obj.spectrometer.spectra ./ lamprepeat; 
     
end

disp('tranmission spectra generated by dividing through lampspectrum') 

end

